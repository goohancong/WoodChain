<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0"
    />
    <title>Supplier Manage Order</title>
    <link
      rel="icon"
      href="/images/WoodChain Logo.png"
      type="image/x-icon"
    />
    <!-- Bootstrap CSS -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="/css/public.css"
    />
    <link
      rel="stylesheet"
      href="/css/manageorder.css"
    />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <style>
      .align-center {
        vertical-align: middle !important;
      }
    </style>
  </head>

  <body style="overflow: hidden">
    <!-- Navigation Bar -->
    <%- include('../partials/navbar') %>
    <!-- End of Navigation Bar -->

    <!-- Header, Search Bar, and Orders Table Section -->
    <div class="container">
      <!-- Header and Search Bar -->
      <h1 class="header sticky-top">Manage Orders</h1>
      <!-- Search Order Bar -->
      <div class="search-bar input-group mb-3 sticky-top">
        <form
          action="/supplier/searchOrders"
          method="POST"
          class="d-flex w-100"
        >
          <input
            type="text"
            name="searchQuery"
            class="form-control"
            placeholder="Search order"
            aria-label="Search order"
            aria-describedby="button-addon2"
            value="<%= searchQuery %>"
          />
          <button
            class="btn btn-outline-secondary"
            type="submit"
            id="button-addon2"
          >
            Search
          </button>
        </form>
      </div>
      <!-- End of Search Order Bar -->

      <!-- Orders Table -->
      <div class="table-container">
        <table
          class="table table-hover table-borderless caption-top text-center align-center"
        >
          <caption>
            Orders
          </caption>
          <thead>
            <tr>
              <th scope="col">Order ID</th>
              <th scope="col">Company Name</th>
              <th scope="col">Date</th>
              <th scope="col">Delivery Date</th>
              <th scope="col">Total</th>
              <th scope="col">Status</th>
            </tr>
          </thead>
          <tbody>
            <% if (orders.length === 0) { %>
            <tr>
              <td
                colspan="6"
                class="text-center text-muted"
              >
                No orders found.
              </td>
            </tr>
            <% } else { %> <% orders.forEach(function(order) { %>
            <tr
              onclick="handleRowClick('<%= order.orderID %>', '<%= order.deliveryStatus %>')"
              style="cursor: pointer"
            >
              <td><%= order.orderID %></td>
              <td><%= order.customerName %></td>
              <td><%= order.date %></td>
              <td><%= order.deliveryDate %></td>
              <td>RM<%= order.totalPrice %></td>
              <td>
                <% if (order.deliveryStatus === 'Pending') { %>
                <button
                  class="btn btn-primary"
                  onclick="showConfirmationModal('<%= order.orderID %>', event)"
                >
                  Confirm Order
                </button>
                <% } else { %>
                <button
                  class="btn btn-secondary"
                  disabled
                >
                  Confirmed
                </button>
                <% } %>
              </td>
            </tr>
            <% }); %> <% } %>
          </tbody>
        </table>
      </div>
      <!-- End of Orders Table -->
    </div>
    <!-- End of Header, Search Bar, and Orders Table Section -->

    <!-- Message Container -->
    <div
      id="message-container"
      class="position-fixed bottom-0 end-0 p-3"
      style="z-index: 11"
    ></div>
    <!-- End of Message Container -->

    <!-- Overlay Message for Invoice Generation -->
    <div
      id="loading-overlay"
      class="position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-50 d-none"
      style="z-index: 1050"
    >
      <div class="d-flex justify-content-center align-items-center w-100 h-100">
        <div
          class="alert alert-info text-center"
          role="alert"
        >
          Invoice is generating, please wait...
        </div>
      </div>
    </div>
    <!-- End of Overlay Message for Invoice Generation -->

    <!-- Modals -->
    <!-- Confirm Order Confirmation Modal -->
    <div
      class="modal fade"
      id="confirmationOrderModal"
      tabindex="-1"
      aria-labelledby="confirmationOrderModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5
              class="modal-title"
              id="confirmationOrderModalLabel"
            >
              Confirm Order
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            Are you sure you want to confirm the delivery of this order?
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button
              type="button"
              class="btn btn-primary"
              id="confirmButton"
            >
              Confirm
            </button>
          </div>
        </div>
      </div>
    </div>
    <!-- End of Confirm Order Confirmation Modal -->

    <!-- Modal for Unconfirmed Orders -->
    <div
      class="modal fade"
      id="orderDetailsModal"
      tabindex="-1"
      aria-labelledby="orderDetailsModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5
              class="modal-title"
              id="orderDetailsModalLabel"
            >
              Order Details
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <div id="orderDetailsContent">
              <!-- Order details will be injected here by JavaScript -->
            </div>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
    <!-- End of Modal for Unconfirmed Orders -->

    <!-- Partial Modals -->
    <%- include('../partials/suppliermodals', { description: description }) %>
    <%- include('../partials/signoutmodal') %> <%-
    include('../partials/uploadprofilephotomodal') %>
    <!-- End of Partial Modals -->
    <!-- Modals -->

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Client Side JS -->
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        let currentOrderID = null;
        let currentButton = null;

        // Ensure overlay is hidden when page is loaded
        hideLoadingOverlay();

        // Shows the confirm order confirmation modal for an order
        window.showConfirmationModal = function (orderID, event) {
          event.stopPropagation(); // Prevent row click event
          currentOrderID = orderID;
          currentButton = event.target; // Store the button reference
          console.log("showConfirmationModal called with orderID:", orderID); // Debug log
          const confirmationModal = new bootstrap.Modal(
            document.getElementById("confirmationOrderModal")
          );
          confirmationModal.show();
        };

        // Confirm button click event listener
        document
          .getElementById("confirmButton")
          .addEventListener("click", function () {
            if (currentOrderID) {
              updateStatus(currentOrderID);
              const confirmationModal = bootstrap.Modal.getInstance(
                document.getElementById("confirmationOrderModal")
              );
              confirmationModal.hide();
            }
          });

        // Handles the row click event to show order details or open invoice
        window.handleRowClick = async function (orderID, orderStatus) {
          const row = document.querySelector(`tr[onclick*="'${orderID}'"]`);
          const updatedStatus = row
            .querySelector("td:nth-child(6) button")
            .textContent.trim();

          if (
            updatedStatus === "Pending" ||
            updatedStatus === "Confirm Order"
          ) {
            try {
              const response = await fetch(
                `/orderdetails/unconfirmed/${orderID}`
              );
              if (response.ok) {
                const orderDetails = await response.json();
                displayOrderDetails(orderDetails);
                const orderDetailsModal = new bootstrap.Modal(
                  document.getElementById("orderDetailsModal")
                );
                orderDetailsModal.show();
              } else {
                showMessage("Failed to fetch order details.", "warning");
              }
            } catch (error) {
              showMessage("Error fetching order details.", "warning");
            }
          } else {
            // Show the loading overlay
            showLoadingOverlay();

            // Open the invoice in a new window
            setTimeout(() => {
              window.open("/orderdetails/" + orderID, "_blank");
              hideLoadingOverlay(); // Hide overlay in the original window
            }, 1000); // Simulate a delay for the overlay to be visible
          }
        };

        // Updates the order status to "Confirmed"
        function updateStatus(orderID) {
          const status = "Confirmed";
          fetch("/supplier/updateOrderStatus", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ orderID: orderID, status: status }), // Include status in the request body
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error("Network response was not ok");
              }
              return response.json();
            })
            .then((data) => {
              if (data.success) {
                showMessage(
                  "Order status updated and recorded to blockchain successfully!",
                  "success"
                );

                // Update the button status immediately
                currentButton.textContent = "Confirmed";
                currentButton.classList.remove("btn-primary");
                currentButton.classList.add("btn-secondary");
                currentButton.disabled = true;

                // Update the local status
                const row = currentButton.closest("tr");
                row
                  .querySelector("td:nth-child(6) button")
                  .classList.remove("btn-primary");
                row
                  .querySelector("td:nth-child(6) button")
                  .classList.add("btn-secondary");
                row.querySelector("td:nth-child(6) button").textContent =
                  "Confirmed";
                row.querySelector("td:nth-child(6) button").disabled = true;
              } else {
                showMessage(
                  "Failed to update status: " + data.message,
                  "danger"
                );
              }
            })
            .catch((error) => {
              console.error("Error updating status:", error);
              showMessage("Error updating status: " + error, "danger");
            });
        }

        // Function to show loading overlay
        function showLoadingOverlay() {
          const loadingOverlay = document.getElementById("loading-overlay");
          loadingOverlay.classList.remove("d-none");
        }

        // Function to hide loading overlay
        function hideLoadingOverlay() {
          const loadingOverlay = document.getElementById("loading-overlay");
          loadingOverlay.classList.add("d-none");
        }

        // Display message to user
        function showMessage(message, type) {
          const messageContainer = document.getElementById("message-container");

          // Clear any existing messages
          while (messageContainer.firstChild) {
            messageContainer.removeChild(messageContainer.firstChild);
          }

          const alert = document.createElement("div");
          alert.className = `alert alert-${type} alert-dismissible fade show`;
          alert.role = "alert";
          alert.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          `;
          messageContainer.appendChild(alert);

          setTimeout(() => {
            alert.classList.remove("show");
            alert.classList.add("hide");
            alert.addEventListener("transitionend", () => alert.remove());
          }, 2500);
        }
      });

      // Displays order detail in modal
      function displayOrderDetails(orderDetails) {
        let grandTotal = 0;
        const orderDetailsContent = document.getElementById(
          "orderDetailsContent"
        );
        orderDetailsContent.innerHTML = `
          <p><strong>CompanyName:</strong> ${orderDetails.userCompanyName}</p>
          <p><strong>Company Address:</strong> ${orderDetails.userAddress}</p>
          <p><strong>Delivery Date:</strong> ${orderDetails.deliveryDate}</p>
          <p><strong>Products:</strong></p>
          <table class="table table-hover table-borderless caption-top text-center">
            <thead>
              <tr>
                <th>Product Name</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
              </tr>
            </thead>
            <tbody>
              ${orderDetails.products
                .map(
                  (product) => `
                <tr>
                  <td>${product.productName}</td>
                  <td>${product.quantity}</td>
                  <td>${product.price}</td>
                  <td>${product.totalPrice.toFixed(2)}</td>
                </tr>
              `
                )
                .join("")}
            </tbody>
          </table>
          <p><strong>Grand Total:</strong> ${orderDetails.totalPrice.toFixed(
            2
          )}</p>
        `;
      }
    </script>
    <!-- End of Client Side JS -->
  </body>
</html>
